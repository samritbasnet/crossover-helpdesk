{"ast":null,"code":"var _jsxFileName = \"/Users/samritbasnet/Desktop/crossover-helpdesk/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Authentication Context - Manages user authentication state\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { authAPI } from \"../services/api\";\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\n// Auth Provider component\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  // State for user authentication\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const checkAuth = async () => {\n      const storedToken = localStorage.getItem(\"token\");\n      const storedUser = localStorage.getItem(\"user\");\n      if (storedToken && storedUser) {\n        try {\n          // Verify token is still valid\n          const response = await authAPI.getCurrentUser();\n          setUser(response.user);\n          setToken(storedToken);\n        } catch (error) {\n          // Token is invalid, clear storage\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"user\");\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    try {\n      const response = await authAPI.login(credentials);\n      const {\n        token: newToken,\n        user: userData\n      } = response;\n\n      // Store in localStorage\n      localStorage.setItem(\"token\", newToken);\n      localStorage.setItem(\"user\", JSON.stringify(userData));\n\n      // Update state\n      setToken(newToken);\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Login failed\"\n      };\n    }\n  };\n\n  // Signup function\n  const signup = async userData => {\n    try {\n      const response = await authAPI.signup(userData);\n      const {\n        token: newToken,\n        user: newUser\n      } = response;\n\n      // Store in localStorage\n      localStorage.setItem(\"token\", newToken);\n      localStorage.setItem(\"user\", JSON.stringify(newUser));\n\n      // Update state\n      setToken(newToken);\n      setUser(newUser);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Signup failed\"\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n\n    // Clear state\n    setToken(null);\n    setUser(null);\n  };\n\n  // Check if user is an agent\n  const isAgent = () => {\n    return user && user.role === \"agent\";\n  };\n\n  // Check if user is a regular user\n  const isUser = () => {\n    return user && user.role === \"user\";\n  };\n\n  // Value object to provide to context consumers\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    signup,\n    logout,\n    isAgent,\n    isUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"CqPWeQPIAZcxf1k81ln9DyaZT80=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","checkAuth","storedToken","storedUser","response","getCurrentUser","error","removeItem","login","credentials","newToken","userData","setItem","JSON","stringify","success","_error$response","_error$response$data","message","data","signup","newUser","_error$response2","_error$response2$data","logout","isAgent","role","isUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samritbasnet/Desktop/crossover-helpdesk/client/src/context/AuthContext.js"],"sourcesContent":["// Authentication Context - Manages user authentication state\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { authAPI } from \"../services/api\";\n\n// Create the context\nconst AuthContext = createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\n// Auth Provider component\nexport const AuthProvider = ({ children }) => {\n  // State for user authentication\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const checkAuth = async () => {\n      const storedToken = localStorage.getItem(\"token\");\n      const storedUser = localStorage.getItem(\"user\");\n\n      if (storedToken && storedUser) {\n        try {\n          // Verify token is still valid\n          const response = await authAPI.getCurrentUser();\n          setUser(response.user);\n          setToken(storedToken);\n        } catch (error) {\n          // Token is invalid, clear storage\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"user\");\n        }\n      }\n      setLoading(false);\n    };\n\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (credentials) => {\n    try {\n      const response = await authAPI.login(credentials);\n      const { token: newToken, user: userData } = response;\n\n      // Store in localStorage\n      localStorage.setItem(\"token\", newToken);\n      localStorage.setItem(\"user\", JSON.stringify(userData));\n\n      // Update state\n      setToken(newToken);\n      setUser(userData);\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || \"Login failed\",\n      };\n    }\n  };\n\n  // Signup function\n  const signup = async (userData) => {\n    try {\n      const response = await authAPI.signup(userData);\n      const { token: newToken, user: newUser } = response;\n\n      // Store in localStorage\n      localStorage.setItem(\"token\", newToken);\n      localStorage.setItem(\"user\", JSON.stringify(newUser));\n\n      // Update state\n      setToken(newToken);\n      setUser(newUser);\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || \"Signup failed\",\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n\n    // Clear state\n    setToken(null);\n    setUser(null);\n  };\n\n  // Check if user is an agent\n  const isAgent = () => {\n    return user && user.role === \"agent\";\n  };\n\n  // Check if user is a regular user\n  const isUser = () => {\n    return user && user.role === \"user\";\n  };\n\n  // Value object to provide to context consumers\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    signup,\n    logout,\n    isAgent,\n    isUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}