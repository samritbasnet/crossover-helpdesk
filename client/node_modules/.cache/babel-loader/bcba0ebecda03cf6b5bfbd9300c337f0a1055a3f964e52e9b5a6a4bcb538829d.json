{"ast":null,"code":"// Utility functions for common operations\n\n// Format date consistently across the app\nexport const formatDate = dateString => {\n  if (!dateString) return 'N/A';\n  return new Date(dateString).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n};\n\n// Format date with time\nexport const formatDateTime = dateString => {\n  if (!dateString) return 'N/A';\n  return new Date(dateString).toLocaleString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\n// Get status color for tickets\nexport const getStatusColor = status => {\n  const colors = {\n    open: 'default',\n    'in-progress': 'warning',\n    resolved: 'success',\n    closed: 'secondary'\n  };\n  return colors[status] || 'default';\n};\n\n// Get priority color for tickets\nexport const getPriorityColor = priority => {\n  const colors = {\n    low: 'success',\n    medium: 'warning',\n    high: 'error',\n    urgent: 'error'\n  };\n  return colors[priority] || 'default';\n};\n\n// Truncate text with ellipsis\nexport const truncateText = (text, maxLength = 100) => {\n  if (!text) return '';\n  return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;\n};\n\n// Handle API errors consistently\nexport const getErrorMessage = error => {\n  var _error$response, _error$response$data;\n  if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n    return error.response.data.message;\n  }\n  if (error.message) {\n    return error.message;\n  }\n  return 'An unexpected error occurred';\n};\n\n// Check if error is network-related\nexport const isNetworkError = error => {\n  return !error.response || error.code === 'NETWORK_ERROR' || error.code === 'ECONNABORTED' || error.message === 'Network Error';\n};\n\n// Get user-friendly error type\nexport const getErrorType = error => {\n  var _error$response2, _error$response3, _error$response4, _error$response5;\n  if (isNetworkError(error)) {\n    return 'network';\n  }\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    return 'auth';\n  }\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 403) {\n    return 'permission';\n  }\n  if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 404) {\n    return 'notfound';\n  }\n  if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) >= 500) {\n    return 'server';\n  }\n  return 'client';\n};\n\n// Check if user has permission\nexport const hasPermission = (user, requiredRole) => {\n  const roleHierarchy = {\n    user: 1,\n    agent: 2,\n    admin: 3\n  };\n  return roleHierarchy[user === null || user === void 0 ? void 0 : user.role] >= roleHierarchy[requiredRole];\n};","map":{"version":3,"names":["formatDate","dateString","Date","toLocaleDateString","year","month","day","formatDateTime","toLocaleString","hour","minute","getStatusColor","status","colors","open","resolved","closed","getPriorityColor","priority","low","medium","high","urgent","truncateText","text","maxLength","length","substring","getErrorMessage","error","_error$response","_error$response$data","response","data","message","isNetworkError","code","getErrorType","_error$response2","_error$response3","_error$response4","_error$response5","hasPermission","user","requiredRole","roleHierarchy","agent","admin","role"],"sources":["/Users/samritbasnet/Desktop/crossover-helpdesk/client/src/utils/helpers.js"],"sourcesContent":["// Utility functions for common operations\n\n// Format date consistently across the app\nexport const formatDate = (dateString) => {\n  if (!dateString) return 'N/A';\n  return new Date(dateString).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  });\n};\n\n// Format date with time\nexport const formatDateTime = (dateString) => {\n  if (!dateString) return 'N/A';\n  return new Date(dateString).toLocaleString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n};\n\n// Get status color for tickets\nexport const getStatusColor = (status) => {\n  const colors = {\n    open: 'default',\n    'in-progress': 'warning',\n    resolved: 'success',\n    closed: 'secondary',\n  };\n  return colors[status] || 'default';\n};\n\n// Get priority color for tickets\nexport const getPriorityColor = (priority) => {\n  const colors = {\n    low: 'success',\n    medium: 'warning',\n    high: 'error',\n    urgent: 'error',\n  };\n  return colors[priority] || 'default';\n};\n\n// Truncate text with ellipsis\nexport const truncateText = (text, maxLength = 100) => {\n  if (!text) return '';\n  return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;\n};\n\n// Handle API errors consistently\nexport const getErrorMessage = (error) => {\n  if (error.response?.data?.message) {\n    return error.response.data.message;\n  }\n  if (error.message) {\n    return error.message;\n  }\n  return 'An unexpected error occurred';\n};\n\n// Check if error is network-related\nexport const isNetworkError = (error) => {\n  return (\n    !error.response || \n    error.code === 'NETWORK_ERROR' ||\n    error.code === 'ECONNABORTED' ||\n    error.message === 'Network Error'\n  );\n};\n\n// Get user-friendly error type\nexport const getErrorType = (error) => {\n  if (isNetworkError(error)) {\n    return 'network';\n  }\n  if (error.response?.status === 401) {\n    return 'auth';\n  }\n  if (error.response?.status === 403) {\n    return 'permission';\n  }\n  if (error.response?.status === 404) {\n    return 'notfound';\n  }\n  if (error.response?.status >= 500) {\n    return 'server';\n  }\n  return 'client';\n};\n\n// Check if user has permission\nexport const hasPermission = (user, requiredRole) => {\n  const roleHierarchy = { user: 1, agent: 2, admin: 3 };\n  return roleHierarchy[user?.role] >= roleHierarchy[requiredRole];\n};\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,UAAU,GAAIC,UAAU,IAAK;EACxC,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;EAC7B,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;IACtDC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE;EACP,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIN,UAAU,IAAK;EAC5C,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;EAC7B,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACO,cAAc,CAAC,OAAO,EAAE;IAClDJ,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdG,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACxC,MAAMC,MAAM,GAAG;IACbC,IAAI,EAAE,SAAS;IACf,aAAa,EAAE,SAAS;IACxBC,QAAQ,EAAE,SAAS;IACnBC,MAAM,EAAE;EACV,CAAC;EACD,OAAOH,MAAM,CAACD,MAAM,CAAC,IAAI,SAAS;AACpC,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C,MAAML,MAAM,GAAG;IACbM,GAAG,EAAE,SAAS;IACdC,MAAM,EAAE,SAAS;IACjBC,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE;EACV,CAAC;EACD,OAAOT,MAAM,CAACK,QAAQ,CAAC,IAAI,SAAS;AACtC,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAGA,CAACC,IAAI,EAAEC,SAAS,GAAG,GAAG,KAAK;EACrD,IAAI,CAACD,IAAI,EAAE,OAAO,EAAE;EACpB,OAAOA,IAAI,CAACE,MAAM,GAAGD,SAAS,GAAG,GAAGD,IAAI,CAACG,SAAS,CAAC,CAAC,EAAEF,SAAS,CAAC,KAAK,GAAGD,IAAI;AAC9E,CAAC;;AAED;AACA,OAAO,MAAMI,eAAe,GAAIC,KAAK,IAAK;EAAA,IAAAC,eAAA,EAAAC,oBAAA;EACxC,KAAAD,eAAA,GAAID,KAAK,CAACG,QAAQ,cAAAF,eAAA,gBAAAC,oBAAA,GAAdD,eAAA,CAAgBG,IAAI,cAAAF,oBAAA,eAApBA,oBAAA,CAAsBG,OAAO,EAAE;IACjC,OAAOL,KAAK,CAACG,QAAQ,CAACC,IAAI,CAACC,OAAO;EACpC;EACA,IAAIL,KAAK,CAACK,OAAO,EAAE;IACjB,OAAOL,KAAK,CAACK,OAAO;EACtB;EACA,OAAO,8BAA8B;AACvC,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIN,KAAK,IAAK;EACvC,OACE,CAACA,KAAK,CAACG,QAAQ,IACfH,KAAK,CAACO,IAAI,KAAK,eAAe,IAC9BP,KAAK,CAACO,IAAI,KAAK,cAAc,IAC7BP,KAAK,CAACK,OAAO,KAAK,eAAe;AAErC,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAIR,KAAK,IAAK;EAAA,IAAAS,gBAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,gBAAA;EACrC,IAAIN,cAAc,CAACN,KAAK,CAAC,EAAE;IACzB,OAAO,SAAS;EAClB;EACA,IAAI,EAAAS,gBAAA,GAAAT,KAAK,CAACG,QAAQ,cAAAM,gBAAA,uBAAdA,gBAAA,CAAgB1B,MAAM,MAAK,GAAG,EAAE;IAClC,OAAO,MAAM;EACf;EACA,IAAI,EAAA2B,gBAAA,GAAAV,KAAK,CAACG,QAAQ,cAAAO,gBAAA,uBAAdA,gBAAA,CAAgB3B,MAAM,MAAK,GAAG,EAAE;IAClC,OAAO,YAAY;EACrB;EACA,IAAI,EAAA4B,gBAAA,GAAAX,KAAK,CAACG,QAAQ,cAAAQ,gBAAA,uBAAdA,gBAAA,CAAgB5B,MAAM,MAAK,GAAG,EAAE;IAClC,OAAO,UAAU;EACnB;EACA,IAAI,EAAA6B,gBAAA,GAAAZ,KAAK,CAACG,QAAQ,cAAAS,gBAAA,uBAAdA,gBAAA,CAAgB7B,MAAM,KAAI,GAAG,EAAE;IACjC,OAAO,QAAQ;EACjB;EACA,OAAO,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAM8B,aAAa,GAAGA,CAACC,IAAI,EAAEC,YAAY,KAAK;EACnD,MAAMC,aAAa,GAAG;IAAEF,IAAI,EAAE,CAAC;IAAEG,KAAK,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAE,CAAC;EACrD,OAAOF,aAAa,CAACF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,IAAI,CAAC,IAAIH,aAAa,CAACD,YAAY,CAAC;AACjE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}