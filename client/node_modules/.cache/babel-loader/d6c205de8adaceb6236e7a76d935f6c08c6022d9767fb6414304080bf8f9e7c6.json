{"ast":null,"code":"// API Service - Handles all communication with the backend\nimport axios from \"axios\";\n\n// API base URL from environment (CRA: REACT_APP_API_BASE). Fallback to local dev.\nconst API_BASE = process.env.REACT_APP_API_BASE || \"http://localhost:3000/api\";\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_BASE,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add token to requests if user is logged in\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle authentication errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid - redirect to login\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\n\n// Authentication API calls\nexport const authAPI = {\n  // Sign up new user\n  signup: async userData => {\n    const response = await api.post(\"/auth/register\", userData);\n    return response.data;\n  },\n  // Login user\n  login: async credentials => {\n    const response = await api.post(\"/auth/login\", credentials);\n    return response.data;\n  },\n  // Get current user info\n  getCurrentUser: async () => {\n    const response = await api.get(\"/auth/verify\");\n    return response.data;\n  }\n};\n\n// Tickets API calls\nexport const ticketsAPI = {\n  // Get all tickets (filtered by user role)\n  getTickets: async (filters = {}) => {\n    const response = await api.get(\"/tickets\", {\n      params: filters\n    });\n    return response.data; // Backend returns { success, tickets, pagination, stats }\n  },\n  // Get single ticket\n  getTicket: async id => {\n    const response = await api.get(`/tickets/${id}`);\n    return response.data; // Backend returns { success, ticket }\n  },\n  // Create new ticket\n  createTicket: async ticketData => {\n    const response = await api.post(\"/tickets\", ticketData);\n    return response.data; // Backend returns { success, message, ticket }\n  },\n  // Update ticket\n  updateTicket: async (id, ticketData) => {\n    const response = await api.put(`/tickets/${id}`, ticketData);\n    return response.data; // Backend returns { success, message, ticket }\n  },\n  // Delete ticket\n  deleteTicket: async id => {\n    const response = await api.delete(`/tickets/${id}`);\n    return response.data; // Backend returns { success, message }\n  }\n};\n\n// Knowledge Base API calls\nexport const knowledgeAPI = {\n  // Get all knowledge articles\n  getArticles: async (filters = {}) => {\n    const response = await api.get(\"/knowledge\", {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get single article\n  getArticle: async id => {\n    const response = await api.get(`/knowledge/${id}`);\n    return response.data;\n  },\n  // Create new article\n  createArticle: async articleData => {\n    const response = await api.post(\"/knowledge\", articleData);\n    return response.data;\n  },\n  // Update article\n  updateArticle: async (id, articleData) => {\n    const response = await api.put(`/knowledge/${id}`, articleData);\n    return response.data;\n  },\n  // Delete article\n  deleteArticle: async id => {\n    const response = await api.delete(`/knowledge/${id}`);\n    return response.data;\n  },\n  // Mark article as helpful\n  markHelpful: async id => {\n    const response = await api.post(`/knowledge/${id}/helpful`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE","process","env","REACT_APP_API_BASE","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","signup","userData","post","data","login","credentials","getCurrentUser","get","ticketsAPI","getTickets","filters","params","getTicket","id","createTicket","ticketData","updateTicket","put","deleteTicket","delete","knowledgeAPI","getArticles","getArticle","createArticle","articleData","updateArticle","deleteArticle","markHelpful"],"sources":["/Users/samritbasnet/Desktop/crossover-helpdesk/client/src/services/api.js"],"sourcesContent":["// API Service - Handles all communication with the backend\nimport axios from \"axios\";\n\n// API base URL from environment (CRA: REACT_APP_API_BASE). Fallback to local dev.\nconst API_BASE = process.env.REACT_APP_API_BASE || \"http://localhost:3000/api\";\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_BASE,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Add token to requests if user is logged in\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Handle authentication errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expired or invalid - redirect to login\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n      window.location.href = \"/login\";\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication API calls\nexport const authAPI = {\n  // Sign up new user\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/register\", userData);\n    return response.data;\n  },\n\n  // Login user\n  login: async (credentials) => {\n    const response = await api.post(\"/auth/login\", credentials);\n    return response.data;\n  },\n\n  // Get current user info\n  getCurrentUser: async () => {\n    const response = await api.get(\"/auth/verify\");\n    return response.data;\n  },\n};\n\n// Tickets API calls\nexport const ticketsAPI = {\n  // Get all tickets (filtered by user role)\n  getTickets: async (filters = {}) => {\n    const response = await api.get(\"/tickets\", { params: filters });\n    return response.data; // Backend returns { success, tickets, pagination, stats }\n  },\n\n  // Get single ticket\n  getTicket: async (id) => {\n    const response = await api.get(`/tickets/${id}`);\n    return response.data; // Backend returns { success, ticket }\n  },\n\n  // Create new ticket\n  createTicket: async (ticketData) => {\n    const response = await api.post(\"/tickets\", ticketData);\n    return response.data; // Backend returns { success, message, ticket }\n  },\n\n  // Update ticket\n  updateTicket: async (id, ticketData) => {\n    const response = await api.put(`/tickets/${id}`, ticketData);\n    return response.data; // Backend returns { success, message, ticket }\n  },\n\n  // Delete ticket\n  deleteTicket: async (id) => {\n    const response = await api.delete(`/tickets/${id}`);\n    return response.data; // Backend returns { success, message }\n  },\n};\n\n// Knowledge Base API calls\nexport const knowledgeAPI = {\n  // Get all knowledge articles\n  getArticles: async (filters = {}) => {\n    const response = await api.get(\"/knowledge\", { params: filters });\n    return response.data;\n  },\n\n  // Get single article\n  getArticle: async (id) => {\n    const response = await api.get(`/knowledge/${id}`);\n    return response.data;\n  },\n\n  // Create new article\n  createArticle: async (articleData) => {\n    const response = await api.post(\"/knowledge\", articleData);\n    return response.data;\n  },\n\n  // Update article\n  updateArticle: async (id, articleData) => {\n    const response = await api.put(`/knowledge/${id}`, articleData);\n    return response.data;\n  },\n\n  // Delete article\n  deleteArticle: async (id) => {\n    const response = await api.delete(`/knowledge/${id}`);\n    return response.data;\n  },\n\n  // Mark article as helpful\n  markHelpful: async (id) => {\n    const response = await api.post(`/knowledge/${id}/helpful`);\n    return response.data;\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}